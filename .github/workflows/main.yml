name: Job Application Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check code formatting with black
      run: |
        pip install black
        black --check --diff .
      continue-on-error: true
    
    - name: Check imports with isort
      run: |
        pip install isort
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Test environment setup
      run: |
        python run.py --check-only
    
    - name: Run basic application tests
      run: |
        python -c "from app import app; print('✓ Flask app imports successfully')"
        python -c "from config import Config; print('✓ Config loads successfully')"
        python -c "from models import init_db; init_db(); print('✓ Database initializes successfully')"
    
    - name: Test web scraping components
      run: |
        python -c "from job_search import JobSearchManager; print('✓ Job search manager imports successfully')"
        python -c "from job_apply import JobApplyManager; print('✓ Job apply manager imports successfully')"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create distribution package
      run: |
        pip install build
        python -m build
      continue-on-error: true
    
    - name: Test application startup
      run: |
        timeout 30s python run.py --check-only || true
    
    - name: Generate documentation
      run: |
        pip install sphinx
        # Add sphinx documentation generation here if needed
      continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Prepare deployment
      run: |
        echo "Deployment preparation complete"
        # Add deployment steps here (e.g., Docker build, cloud deployment)
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment commands here
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✓ All checks passed successfully!"
        else
          echo "✗ Some checks failed. Please review the workflow results."
        fi
